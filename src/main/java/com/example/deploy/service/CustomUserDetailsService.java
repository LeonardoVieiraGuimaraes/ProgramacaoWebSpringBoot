package com.example.deploy.service;

import com.example.deploy.model.User;
import com.example.deploy.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * üë§ Custom UserDetailsService - Servi√ßo de carregamento de usu√°rios
 * 
 * Implementa UserDetailsService do Spring Security para carregar
 * usu√°rios do banco de dados durante o processo de autentica√ß√£o
 * 
 * @author Leonardo Vieira Guimar√£es
 * @since 2025-09-23
 */
@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    /**
     * üîç Carregar usu√°rio por username (usado pelo Spring Security)
     * 
     * @param username Username ou email do usu√°rio
     * @return UserDetails do usu√°rio encontrado
     * @throws UsernameNotFoundException se usu√°rio n√£o for encontrado
     */
    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // üîç Buscar por username ou email
        User user = userRepository.findByUsernameOrEmail(username, username)
                .orElseThrow(() -> new UsernameNotFoundException(
                    "Usu√°rio n√£o encontrado com username/email: " + username
                ));

        // ‚úÖ Verificar se usu√°rio est√° ativo
        if (!user.isEnabled()) {
            throw new UsernameNotFoundException(
                "Usu√°rio desabilitado: " + username
            );
        }

        // üîí Verificar se conta n√£o est√° bloqueada
        if (!user.isAccountNonLocked()) {
            throw new UsernameNotFoundException(
                "Conta bloqueada: " + username
            );
        }

        // ‚è∞ Verificar se conta n√£o expirou
        if (!user.isAccountNonExpired()) {
            throw new UsernameNotFoundException(
                "Conta expirada: " + username
            );
        }

        // üîë Verificar se credenciais n√£o expiraram
        if (!user.isCredentialsNonExpired()) {
            throw new UsernameNotFoundException(
                "Credenciais expiradas: " + username
            );
        }

        return user;
    }

    /**
     * üîç Carregar usu√°rio por ID (m√©todo utilit√°rio)
     * 
     * @param userId ID do usu√°rio
     * @return UserDetails do usu√°rio encontrado
     * @throws UsernameNotFoundException se usu√°rio n√£o for encontrado
     */
    @Transactional(readOnly = true)
    public UserDetails loadUserById(Long userId) throws UsernameNotFoundException {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UsernameNotFoundException(
                    "Usu√°rio n√£o encontrado com ID: " + userId
                ));

        return user;
    }
}