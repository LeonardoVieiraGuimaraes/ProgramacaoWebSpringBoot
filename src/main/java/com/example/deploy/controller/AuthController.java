package com.example.deploy.controller;

import com.example.deploy.dto.*;
import com.example.deploy.model.User;
import com.example.deploy.security.JwtTokenUtil;
import com.example.deploy.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;

/**
 * üîê AuthController - Controller de autentica√ß√£o e autoriza√ß√£o
 * 
 * Endpoints:
 * - POST /auth/login - Login do usu√°rio
 * - POST /auth/signup - Registro de novo usu√°rio
 * - POST /auth/refresh - Refresh do token JWT
 * - POST /auth/logout - Logout (invalidar token no cliente)
 * 
 * @author Leonardo Vieira Guimar√£es
 * @since 2025-09-23
 */
@RestController
@RequestMapping("/auth")
@Tag(name = "Autentica√ß√£o", description = "Endpoints de autentica√ß√£o e autoriza√ß√£o")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserService userService;

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    /**
     * üîê Login do usu√°rio
     */
    @PostMapping("/login")
    @Operation(summary = "Login do usu√°rio", description = "Autentica usu√°rio e retorna token JWT")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
        try {
            // üîê Autenticar usu√°rio
            Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                    loginRequest.getUsername(),
                    loginRequest.getPassword()
                )
            );

            // üîí Definir autentica√ß√£o no contexto
            SecurityContextHolder.getContext().setAuthentication(authentication);

            // üéØ Gerar token JWT
            String jwt = jwtTokenUtil.generateToken(authentication);

            // üë§ Obter detalhes do usu√°rio
            User user = (User) authentication.getPrincipal();

            // üîê Atualizar √∫ltimo login
            userService.updateLastLogin(user.getId());

            // ‚è∞ Calcular expira√ß√£o
            long expirationMs = jwtTokenUtil.getJwtExpirationMs();
            LocalDateTime expiresAt = LocalDateTime.now().plusSeconds(expirationMs / 1000);
            Long expiresIn = expirationMs / 1000; // Converter para segundos

            // üì§ Criar resposta
            JwtResponse jwtResponse = new JwtResponse(
                jwt,
                user.getUsername(),
                user.getEmail(),
                user.getFullName(),
                user.getRoles(),
                expiresAt,
                expiresIn
            );

            return ResponseEntity.ok(jwtResponse);

        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(MessageResponse.error("Credenciais inv√°lidas: " + e.getMessage()));
        }
    }

    /**
     * üìù Registro de novo usu√°rio
     */
    @PostMapping("/signup")
    @Operation(summary = "Registro de usu√°rio", description = "Registra novo usu√°rio no sistema")
    public ResponseEntity<?> registerUser(@Valid @RequestBody SignupRequest signupRequest) {
        try {
            // ‚úÖ Verificar se username j√° existe
            if (userService.existsByUsername(signupRequest.getUsername())) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Erro: Username j√° est√° em uso!"));
            }

            // ‚úÖ Verificar se email j√° existe
            if (userService.existsByEmail(signupRequest.getEmail())) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Erro: Email j√° est√° em uso!"));
            }

            // üìù Criar usu√°rio
            User user = userService.createUser(signupRequest);

            return ResponseEntity.ok(MessageResponse.success(
                "Usu√°rio registrado com sucesso!",
                user.getUsername()
            ));

        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(MessageResponse.error("Erro ao registrar usu√°rio: " + e.getMessage()));
        }
    }

    /**
     * üìù Registro r√°pido (apenas com dados b√°sicos)
     */
    @PostMapping("/signup/quick")
    @Operation(summary = "Registro r√°pido", description = "Registra usu√°rio com role USER padr√£o")
    public ResponseEntity<?> quickRegister(@Valid @RequestBody LoginRequest loginRequest) {
        try {
            // ‚úÖ Verificar se username j√° existe
            if (userService.existsByUsername(loginRequest.getUsername())) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Erro: Username j√° est√° em uso!"));
            }

            // üìù Criar usu√°rio com role padr√£o
            User user = userService.createUserWithDefaultRole(
                loginRequest.getUsername(),
                loginRequest.getUsername() + "@example.com", // Email tempor√°rio
                loginRequest.getPassword()
            );

            return ResponseEntity.ok(MessageResponse.success(
                "Usu√°rio registrado com sucesso!",
                user.getUsername()
            ));

        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(MessageResponse.error("Erro ao registrar usu√°rio: " + e.getMessage()));
        }
    }

    /**
     * üîÑ Refresh do token JWT
     */
    @PostMapping("/refresh")
    @Operation(summary = "Refresh token", description = "Gera novo token JWT baseado no token atual")
    public ResponseEntity<?> refreshToken(@RequestHeader("Authorization") String authHeader) {
        try {
            // üîç Extrair token do header
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Token JWT n√£o fornecido!"));
            }

            String token = authHeader.substring(7);

            // ‚úÖ Validar token atual
            if (!jwtTokenUtil.validateToken(token)) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Token JWT inv√°lido ou expirado!"));
            }

            // üîÑ Gerar novo token
            String newToken = jwtTokenUtil.refreshToken(token);
            
            if (newToken == null) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("N√£o foi poss√≠vel renovar o token!"));
            }

            // üë§ Obter informa√ß√µes do usu√°rio
            String username = jwtTokenUtil.getUsernameFromToken(token);
            User user = userService.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Usu√°rio n√£o encontrado"));

            // ‚è∞ Calcular nova expira√ß√£o
            long expirationMs = jwtTokenUtil.getJwtExpirationMs();
            LocalDateTime expiresAt = LocalDateTime.now().plusSeconds(expirationMs / 1000);
            Long expiresIn = expirationMs / 1000;

            // üì§ Criar resposta
            JwtResponse jwtResponse = new JwtResponse(
                newToken,
                user.getUsername(),
                user.getEmail(),
                user.getFullName(),
                user.getRoles(),
                expiresAt,
                expiresIn
            );

            return ResponseEntity.ok(jwtResponse);

        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(MessageResponse.error("Erro ao renovar token: " + e.getMessage()));
        }
    }

    /**
     * üö™ Logout (cliente deve invalidar o token)
     */
    @PostMapping("/logout")
    @Operation(summary = "Logout", description = "Instrui cliente a invalidar o token JWT")
    public ResponseEntity<?> logout() {
        // Em uma implementa√ß√£o JWT stateless, o logout √© responsabilidade do cliente
        // O cliente deve simplesmente descartar o token
        
        return ResponseEntity.ok(MessageResponse.success(
            "Logout realizado com sucesso! Token deve ser descartado pelo cliente."
        ));
    }

    /**
     * üìä Verificar status do token
     */
    @GetMapping("/verify")
    @Operation(summary = "Verificar token", description = "Verifica se o token JWT √© v√°lido")
    public ResponseEntity<?> verifyToken(@RequestHeader("Authorization") String authHeader) {
        try {
            // üîç Extrair token do header
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Token JWT n√£o fornecido!"));
            }

            String token = authHeader.substring(7);

            // ‚úÖ Validar token
            if (!jwtTokenUtil.validateToken(token)) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Token JWT inv√°lido ou expirado!"));
            }

            // üìä Obter informa√ß√µes do token
            return ResponseEntity.ok(MessageResponse.success(
                "Token v√°lido!",
                jwtTokenUtil.getTokenInfo(token)
            ));

        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(MessageResponse.error("Erro ao verificar token: " + e.getMessage()));
        }
    }

    /**
     * üë§ Obter perfil do usu√°rio atual
     */
    @GetMapping("/profile")
    @Operation(summary = "Perfil do usu√°rio", description = "Retorna dados do usu√°rio autenticado")
    public ResponseEntity<?> getUserProfile(Authentication authentication) {
        try {
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.badRequest()
                    .body(MessageResponse.error("Usu√°rio n√£o autenticado!"));
            }

            User user = (User) authentication.getPrincipal();
            
            // üì§ Criar resposta sem informa√ß√µes sens√≠veis
            JwtResponse profile = new JwtResponse();
            profile.setUsername(user.getUsername());
            profile.setEmail(user.getEmail());
            profile.setFullName(user.getFullName());
            profile.setRoles(user.getRoles());

            return ResponseEntity.ok(MessageResponse.success(
                "Perfil do usu√°rio",
                profile
            ));

        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(MessageResponse.error("Erro ao obter perfil: " + e.getMessage()));
        }
    }
}