# Script de diagn√≥stico para containers que ficam restartando
# Execute este script para identificar o problema

Write-Host "=== Diagn√≥stico de Container Restart ===" -ForegroundColor Green
Write-Host ""

# Verificar se Docker est√° rodando
try {
    docker version | Out-Null
    Write-Host "‚úÖ Docker est√° rodando" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando ou n√£o est√° instalado" -ForegroundColor Red
    exit 1
}

# Verificar containers
Write-Host "üìä Status atual dos containers:" -ForegroundColor Yellow
docker ps -a --filter "name=prowebv01"

Write-Host ""
Write-Host "üìã Logs do container (√∫ltimas 50 linhas):" -ForegroundColor Yellow
docker logs prowebv01-app --tail=50 2>$null

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Container prowebv01-app n√£o encontrado" -ForegroundColor Yellow
    Write-Host "Tentando com docker-compose..." -ForegroundColor Yellow
    
    if (Test-Path "docker-compose.yml") {
        docker-compose logs --tail=50 app 2>$null
    } else {
        Write-Host "‚ùå Arquivo docker-compose.yml n√£o encontrado" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üîç Verificando recursos do sistema:" -ForegroundColor Yellow
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"

Write-Host ""
Write-Host "üß™ Testando conectividade:" -ForegroundColor Yellow

# Testar porta 8013
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8013/" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "‚úÖ Aplica√ß√£o respondendo na porta 8013" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Aplica√ß√£o n√£o responde na porta 8013" -ForegroundColor Red
}

# Testar health endpoint
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8013/actuator/health" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "‚úÖ Health endpoint respondendo" -ForegroundColor Green
    Write-Host "Response: $($response.Content)" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Health endpoint n√£o responde" -ForegroundColor Red
}

Write-Host ""
Write-Host "üîß Verificando configura√ß√µes:" -ForegroundColor Yellow

# Verificar docker-compose.yml
if (Test-Path "docker-compose.yml") {
    Write-Host "‚úÖ docker-compose.yml encontrado" -ForegroundColor Green
    Write-Host "üìã Configura√ß√£o atual:" -ForegroundColor Cyan
    Get-Content "docker-compose.yml" | Select-Object -First 20
} else {
    Write-Host "‚ùå docker-compose.yml n√£o encontrado" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìÅ Verificando arquivos necess√°rios:" -ForegroundColor Yellow

$arquivos = @(
    "target\*.jar",
    "Dockerfile.spring",
    "src\main\resources\application.yaml"
)

foreach ($arquivo in $arquivos) {
    if (Test-Path $arquivo) {
        Write-Host "‚úÖ $arquivo existe" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $arquivo n√£o encontrado" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üè• Comandos √∫teis para debug:" -ForegroundColor Magenta
Write-Host "1. Ver logs em tempo real: docker-compose logs -f app" -ForegroundColor Gray
Write-Host "2. Entrar no container: docker exec -it prowebv01-app /bin/bash" -ForegroundColor Gray
Write-Host "3. Rebuild completo: docker-compose down && docker-compose build --no-cache && docker-compose up -d" -ForegroundColor Gray
Write-Host "4. Ver processos Java: docker exec prowebv01-app ps aux | grep java" -ForegroundColor Gray

Write-Host ""
Write-Host "üîç Poss√≠veis causas de restart:" -ForegroundColor Red
Write-Host "- Porta 8013 j√° em uso por outro processo" -ForegroundColor Yellow
Write-Host "- Erro no arquivo JAR (build falhou)" -ForegroundColor Yellow
Write-Host "- Problemas de mem√≥ria (OOM)" -ForegroundColor Yellow
Write-Host "- Configura√ß√£o incorreta no application.yaml" -ForegroundColor Yellow
Write-Host "- Health check falhando" -ForegroundColor Yellow

Write-Host ""
Write-Host "Pressione Enter para continuar..."
Read-Host