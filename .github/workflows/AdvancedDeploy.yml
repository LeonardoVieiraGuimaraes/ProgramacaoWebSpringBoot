name: 🚀 Deploy Multi-Environment (Dev/Staging/Prod)

on:
  push:
    branches:
      - main        # Produção
      - staging     # Homologação
      - develop     # Desenvolvimento
    paths-ignore:
      - 'README.md'
      - '**/*.md'
      - 'docs/**'
  
  create:
    tags:
      - 'v*'        # Deploy por tags (releases)
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - development
        - staging
        - production
      version_tag:
        description: 'Version tag (for production)'
        required: false
        type: string

env:
  MAVEN_OPTS: -Xmx2048m

jobs:
  determine-environment:
    name: 🎯 Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      project_name: ${{ steps.env.outputs.project_name }}
      domain: ${{ steps.env.outputs.domain }}
      port: ${{ steps.env.outputs.port }}
      spring_profile: ${{ steps.env.outputs.spring_profile }}
      deploy_tag: ${{ steps.env.outputs.deploy_tag }}
    
    steps:
      - name: 🎯 Determine deployment environment
        id: env
        run: |
          # Determine environment
          if [ "${{ github.event.inputs.environment }}" == "development" ]; then
            ENV="development"
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            ENV="staging"
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            ENV="production"
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            ENV="staging"
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            ENV="development"
          else
            ENV="development"
          fi
          
          # Set environment-specific variables
          case $ENV in
            "production")
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "project_name=prowebv01-prod" >> $GITHUB_OUTPUT
              echo "domain=prowebv01.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8013" >> $GITHUB_OUTPUT
              echo "spring_profile=prod" >> $GITHUB_OUTPUT
              echo "deploy_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "project_name=prowebv01-staging" >> $GITHUB_OUTPUT
              echo "domain=staging.prowebv01.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8020" >> $GITHUB_OUTPUT
              echo "spring_profile=staging" >> $GITHUB_OUTPUT
              echo "deploy_tag=staging-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
              ;;
            "development")
              echo "environment=development" >> $GITHUB_OUTPUT
              echo "project_name=prowebv01-dev" >> $GITHUB_OUTPUT
              echo "domain=dev.prowebv01.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8021" >> $GITHUB_OUTPUT
              echo "spring_profile=dev" >> $GITHUB_OUTPUT
              echo "deploy_tag=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
              ;;
          esac

  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    needs: determine-environment
    
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Display deployment info
        run: |
          echo "🚀 Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "📁 Project: ${{ needs.determine-environment.outputs.project_name }}"
          echo "🌐 Domain: ${{ needs.determine-environment.outputs.domain }}"
          echo "🔌 Port: ${{ needs.determine-environment.outputs.port }}"
          echo "🎯 Profile: ${{ needs.determine-environment.outputs.spring_profile }}"
          echo "🏷️ Tag: ${{ needs.determine-environment.outputs.deploy_tag }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: 🔧 Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: 🧪 Run tests
        run: ./mvnw clean test -Dspring.profiles.active=${{ needs.determine-environment.outputs.spring_profile }}

      - name: 🔨 Build Spring Boot application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=${{ needs.determine-environment.outputs.spring_profile }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.determine-environment.outputs.environment }}
          path: |
            target/*.jar
            docker-compose.yml
            Dockerfile.spring
            src/main/resources/application*.yml
          retention-days: 30

  deploy:
    name: 🚀 Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.determine-environment.outputs.environment }}

      - name: ☁️ Setup Cloudflare
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: 🔑 Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOME_SERVER_SSH_KEY }}

      - name: 🔐 Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host ssh.leoproti.com.br" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "  ConnectTimeout 30" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: 📝 Generate environment-specific docker-compose
        run: |
          cat > docker-compose-${{ needs.determine-environment.outputs.environment }}.yml << EOF
          version: "3.8"
          
          services:
            app:
              build:
                context: .
                dockerfile: Dockerfile.spring
              image: ${{ needs.determine-environment.outputs.project_name }}-spring-boot-app:${{ needs.determine-environment.outputs.deploy_tag }}
              container_name: ${{ needs.determine-environment.outputs.project_name }}-app
              ports:
                - "${{ needs.determine-environment.outputs.port }}:${{ needs.determine-environment.outputs.port }}"
              environment:
                - SPRING_PROFILES_ACTIVE=${{ needs.determine-environment.outputs.spring_profile }}
                - SERVER_PORT=${{ needs.determine-environment.outputs.port }}
                - SERVER_CONTEXT_PATH=/
                - SPRING_DATASOURCE_URL=jdbc:h2:file:/data/h2db/db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL;WRITE_DELAY=0;LOCK_TIMEOUT=10000
                - SPRING_DATASOURCE_DRIVER=org.h2.Driver
                - SPRING_DATASOURCE_USERNAME=sa
                - SPRING_DATASOURCE_PASSWORD=\${H2_DB_PASSWORD:-${{ needs.determine-environment.outputs.environment }}password}
                - SPRING_JPA_DIALECT=org.hibernate.dialect.H2Dialect
                - SPRING_JPA_SHOW_SQL=${{ needs.determine-environment.outputs.environment == 'development' && 'true' || 'false' }}
                - SPRING_JPA_HIBERNATE_DDL_AUTO=update
                - H2_CONSOLE_ENABLED=${{ needs.determine-environment.outputs.environment == 'development' && 'true' || 'false' }}
                - LOG_LEVEL=${{ needs.determine-environment.outputs.environment == 'development' && 'DEBUG' || 'INFO' }}
                - LOG_LEVEL_WEB=${{ needs.determine-environment.outputs.environment == 'development' && 'INFO' || 'WARN' }}
                - JAVA_OPTS=-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom
                - TZ=America/Sao_Paulo
                - DEPLOY_TAG=${{ needs.determine-environment.outputs.deploy_tag }}
                - DEPLOY_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                - GIT_COMMIT=${{ github.sha }}
                - GIT_BRANCH=${{ github.ref_name }}
              volumes:
                - ./h2data:/data/h2db:rw
                - ./logs:/var/log/prowebv01:rw
              restart: unless-stopped
              user: "1000:1000"
              networks:
                - ${{ needs.determine-environment.outputs.project_name }}-network
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:${{ needs.determine-environment.outputs.port }}/actuator/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 45s
              labels:
                - "environment=${{ needs.determine-environment.outputs.environment }}"
                - "version=${{ needs.determine-environment.outputs.deploy_tag }}"
                - "commit=${{ github.sha }}"
                - "branch=${{ github.ref_name }}"
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "5"
          
          networks:
            ${{ needs.determine-environment.outputs.project_name }}-network:
              driver: bridge
              name: ${{ needs.determine-environment.outputs.project_name }}-network
          EOF

      - name: 🧹 Prepare server environment
        run: |
          echo "🚀 Preparing ${{ needs.determine-environment.outputs.environment }} environment..."
          
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              -o ConnectTimeout=30 \
              -o StrictHostKeyChecking=no \
              leonardovieiraxy@ssh.leoproti.com.br << EOF
            
            # Stop existing container
            docker stop ${{ needs.determine-environment.outputs.project_name }}-app || true
            docker rm ${{ needs.determine-environment.outputs.project_name }}-app || true
            
            # Create project directory
            PROJECT_DIR="/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}"
            mkdir -p \$PROJECT_DIR
            cd \$PROJECT_DIR
            
            # Setup directories with proper permissions
            echo "🔧 Setting up directories for ${{ needs.determine-environment.outputs.environment }}..."
            rm -rf ./h2data ./logs 2>/dev/null || true
            mkdir -p ./h2data ./logs
            chmod 755 ./h2data ./logs
            chown -R leonardovieiraxy:leonardovieiraxy ./h2data ./logs 2>/dev/null || true
            
            # Cleanup old images (keep last 3)
            echo "🧹 Cleaning up old Docker images..."
            docker images "${{ needs.determine-environment.outputs.project_name }}-spring-boot-app" --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print \$3}' | xargs -r docker rmi || true
            
            echo "✅ ${{ needs.determine-environment.outputs.environment }} environment prepared"
          EOF

      - name: 📤 Transfer files to server
        run: |
          echo "📤 Transferring files to ${{ needs.determine-environment.outputs.environment }}..."
          
          PROJECT_DIR="/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}"
          
          # Transfer docker-compose
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                docker-compose-${{ needs.determine-environment.outputs.environment }}.yml \
                leonardovieiraxy@ssh.leoproti.com.br:\$PROJECT_DIR/docker-compose.yml
          
          # Transfer other files
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                Dockerfile.spring \
                leonardovieiraxy@ssh.leoproti.com.br:\$PROJECT_DIR/
          
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                target/ \
                leonardovieiraxy@ssh.leoproti.com.br:\$PROJECT_DIR/target/

      - name: 🚀 Deploy application
        run: |
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              leonardovieiraxy@ssh.leoproti.com.br << EOF
            
            cd /home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}
            
            echo "🚀 Deploying ${{ needs.determine-environment.outputs.project_name }} (${{ needs.determine-environment.outputs.environment }})..."
            
            # Build and start
            docker-compose down --remove-orphans || true
            docker-compose build --no-cache
            docker-compose up -d
            
            # Wait for startup
            echo "⏳ Waiting for application to start..."
            sleep 45
            
            # Health check
            if docker ps | grep -q "${{ needs.determine-environment.outputs.project_name }}-app"; then
              echo "✅ Container is running!"
              
              # Test health endpoint
              for i in {1..10}; do
                if docker exec ${{ needs.determine-environment.outputs.project_name }}-app curl -f http://localhost:${{ needs.determine-environment.outputs.port }}/actuator/health > /dev/null 2>&1; then
                  echo "✅ Health check passed!"
                  break
                else
                  echo "⏳ Health check attempt \$i/10..."
                  sleep 10
                fi
              done
              
              # Show container info
              echo "📊 Container Status:"
              docker ps | grep "${{ needs.determine-environment.outputs.project_name }}-app"
              echo "🔗 Application URL: https://${{ needs.determine-environment.outputs.domain }}"
              
            else
              echo "❌ Deployment failed!"
              echo "📜 Container logs:"
              docker logs ${{ needs.determine-environment.outputs.project_name }}-app || true
              exit 1
            fi
          EOF

      - name: 📊 Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ needs.determine-environment.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Project** | ${{ needs.determine-environment.outputs.project_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ needs.determine-environment.outputs.deploy_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Domain** | https://${{ needs.determine-environment.outputs.domain }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Port** | ${{ needs.determine-environment.outputs.port }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Profile** | ${{ needs.determine-environment.outputs.spring_profile }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 Application](https://${{ needs.determine-environment.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
          echo "- [❤️ Health Check](https://${{ needs.determine-environment.outputs.domain }}/actuator/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 Products API](https://${{ needs.determine-environment.outputs.domain }}/produtos)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.determine-environment.outputs.environment }}" == "development" ]; then
            echo "- [🗄️ H2 Console](https://${{ needs.determine-environment.outputs.domain }}/h2-console)" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    name: 📬 Notify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: always()
    
    steps:
      - name: 📬 Deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment to ${{ needs.determine-environment.outputs.environment }} successful!"
            echo "🔗 URL: https://${{ needs.determine-environment.outputs.domain }}"
          else
            echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          fi