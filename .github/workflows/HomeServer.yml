name: Deploy Spring Boot App to Home Server

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'comandos.txt'
      - '**/*.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: 🏠 Build and Deploy to Home Server
    runs-on: ubuntu-latest
    
    env:
      SPRING_PROFILES_ACTIVE: prod
      MAVEN_OPTS: -Xmx2048m
    
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: 🔧 Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: 🧪 Run tests
        run: ./mvnw clean test

      - name: 🔨 Build Spring Boot application
        run: ./mvnw clean package -DskipTests

      - name: ☁️ Setup Cloudflare
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: 🔑 Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOME_SERVER_SSH_KEY }}

      - name: 🔐 Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host ssh.leoproti.com.br" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "  ConnectTimeout 30" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: 🧹 Clean and prepare server
        run: |
          echo "Trying to connect to server..."
          
          # Função para executar comandos SSH
          execute_ssh() {
            ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
                -o ConnectTimeout=30 \
                -o StrictHostKeyChecking=no \
                leonardovieiraxy@ssh.leoproti.com.br << 'EOF'
              # Parar aplicação se estiver rodando
              docker stop prowebv01-app || true
              docker rm prowebv01-app || true
              
              # Criar pasta projetos se não existir
              mkdir -p /home/leonardovieiraxy/projetos/prowebv01
          EOF
          }
          
          # Executar com retry
          execute_ssh || {
            echo "First attempt failed, retrying in 10 seconds..."
            sleep 10
            execute_ssh
          }

      - name: 📤 Transfer project files
        run: |
          # Transferir arquivos necessários usando rsync com Cloudflare tunnel
          rsync -avz --delete \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                docker-compose.yml \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/prowebv01/
          
          rsync -avz --delete \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                Dockerfile.spring \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/prowebv01/
          
          rsync -avz --delete \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                target/ \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/prowebv01/target/

      - name: 🚀 Deploy on server
        run: |
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              leonardovieiraxy@ssh.leoproti.com.br << 'EOF'
            cd /home/leonardovieiraxy/projetos/prowebv01
            
            # Verificar se existe docker-compose.yml
            if [ ! -f docker-compose.yml ]; then
              echo "❌ ERROR: docker-compose.yml not found!"
              ls -la
              exit 1
            fi
            
            # Mostrar conteúdo do docker-compose para debug
            echo "📋 Docker Compose configuration:"
            cat docker-compose.yml
            
            # Parar containers existentes
            echo "🛑 Stopping existing containers..."
            docker compose down || true
            
            # Limpar containers órfãos
            docker container prune -f || true
            
            # Build e start do container
            echo "🔨 Building container..."
            docker compose build --no-cache
            
            echo "🚀 Starting container..."
            docker compose up -d
            
            # Aguardar inicialização
            echo "⏳ Waiting for container startup..."
            sleep 30
            
            # Verificar status detalhado
            echo "📊 Container status:"
            docker compose ps -a
            
            echo "📝 Container logs (last 50 lines):"
            docker compose logs --tail=50 app || true
            
            # Verificar se o container está realmente rodando
            if [ "$(docker compose ps -q app)" ]; then
              container_status=$(docker inspect $(docker compose ps -q app) --format='{{.State.Status}}')
              echo "Container status: $container_status"
              
              if [ "$container_status" = "running" ]; then
                echo "✅ Container is running successfully!"
                
                # Teste de conectividade
                echo "🧪 Testing connectivity..."
                for i in {1..5}; do
                  if curl -f http://localhost:8013/ 2>/dev/null; then
                    echo "✅ Application is responding on port 8013!"
                    break
                  elif curl -f http://localhost:8013/actuator/health 2>/dev/null; then
                    echo "✅ Health endpoint is responding!"
                    break
                  else
                    echo "⏳ Attempt $i/5 - waiting for application..."
                    sleep 10
                  fi
                done
              else
                echo "❌ Container is not running properly!"
                echo "📋 Full container inspection:"
                docker inspect $(docker compose ps -q app) || true
              fi
            else
              echo "❌ No container found!"
            fi
          EOF

      - name: ✅ Deployment Summary
        run: |
          echo "🎉 Deployment completed!"
          echo "📝 Application available at: https://prowebv01.leoproti.com.br:8013"
          echo "🔗 Local server: http://localhost:8013"
          echo "☕ Java Version: 21 (LTS)"