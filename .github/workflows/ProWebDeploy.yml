name: üöÄ Deploy ProWeb (Staging/Production)

on:
  push:
    branches:
        - main        # Produ√ß√£o (proweb.leoproti.com.br)
        - staging     # Homologa√ß√£o (staging.proweb.leoproti.com.br)
        - v01      # Desenvolvimento (deploy autom√°tico na branch v01)
    paths-ignore:
      - 'README.md'
      - '**/*.md'
      - 'docs/**'
    tags:
      - 'v*'        # Deploy por tags (releases)
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - staging
        - production
      version_tag:
        description: 'Version tag (for production)'
        required: false
        type: string

env:
  MAVEN_OPTS: -Xmx2048m

jobs:
  determine-environment:
    name: üéØ Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      project_name: ${{ steps.env.outputs.project_name }}
      domain: ${{ steps.env.outputs.domain }}
      port: ${{ steps.env.outputs.port }}
      spring_profile: ${{ steps.env.outputs.spring_profile }}
      deploy_tag: ${{ steps.env.outputs.deploy_tag }}
    
    steps:
      - name: üéØ Determine deployment environment
        id: env
        run: |
          # Determine environment based on branch and manual input
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            ENV="staging"
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            ENV="production"
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            ENV="staging"
          elif [ "${{ github.ref }}" == "refs/heads/v01" ]; then
            ENV="dev"
          else
            ENV="staging"
          fi
          
          # Set environment-specific variables
          case $ENV in
            "production")
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "project_name=proweb-prod" >> $GITHUB_OUTPUT
              echo "domain=proweb.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8021" >> $GITHUB_OUTPUT
              echo "spring_profile=prod" >> $GITHUB_OUTPUT
              echo "deploy_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "project_name=proweb-staging" >> $GITHUB_OUTPUT
              echo "domain=staging.proweb.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8020" >> $GITHUB_OUTPUT
              echo "spring_profile=staging" >> $GITHUB_OUTPUT
              echo "deploy_tag=staging-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
              ;;
            "dev")
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "project_name=proweb-dev" >> $GITHUB_OUTPUT
              echo "domain=dev.proweb.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8013" >> $GITHUB_OUTPUT
              echo "spring_profile=dev" >> $GITHUB_OUTPUT
              echo "deploy_tag=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
              ;;
          esac

  build:
    name: üî® Build Application
    runs-on: ubuntu-latest
    needs: determine-environment
    
    steps:
      - name: üöö Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Display deployment info
        run: |
          echo "üöÄ Deploying to: ${{ needs.determine-environment.outputs.environment }}"
          echo "üìÅ Project: ${{ needs.determine-environment.outputs.project_name }}"
          echo "üåê Domain: ${{ needs.determine-environment.outputs.domain }}"
          echo "üîå Port: ${{ needs.determine-environment.outputs.port }}"
          echo "üìù Profile: ${{ needs.determine-environment.outputs.spring_profile }}"
          echo "üè∑Ô∏è Tag: ${{ needs.determine-environment.outputs.deploy_tag }}"
          echo "üåø Branch: ${{ github.ref_name }}"

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: üîß Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: üß™ Run tests
        run: ./mvnw clean test

      - name: üî® Build Spring Boot application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=${{ needs.determine-environment.outputs.spring_profile }}

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.determine-environment.outputs.project_name }}-jar
          path: target/*.jar

  deploy:
    name: üöÄ Deploy to Server
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: üöö Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.determine-environment.outputs.project_name }}-jar
          path: target/

      - name: ‚òÅÔ∏è Setup Cloudflare
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: üîë Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOME_SERVER_SSH_KEY }}

      - name: üîê Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOME_SERVER_SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          echo "Host ssh.leoproti.com.br" > ~/.ssh/config
          echo "  ConnectTimeout 30" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: üìù Select docker-compose file for environment
        run: |
          # Determinar qual arquivo docker-compose usar baseado no environment
            # Seleciona o arquivo docker-compose conforme o ambiente
            if [ "${{ needs.determine-environment.outputs.environment }}" == "production" ]; then
              cp docker-compose-prod.yml docker-compose-deploy.yml
              echo "Usando docker-compose-prod.yml para produ√ß√£o."
            elif [ "${{ needs.determine-environment.outputs.environment }}" == "staging" ]; then
              cp docker-compose-staging.yml docker-compose-deploy.yml
              echo "Usando docker-compose-staging.yml para staging."
            else
              cp docker-compose.yml docker-compose-deploy.yml
              echo "Usando docker-compose.yml para desenvolvimento/v01."
            fi

      - name: üßπ Clean and prepare server
        run: |
          echo "üöÄ Preparing ${{ needs.determine-environment.outputs.environment }} environment..."
          
            # Liberar porta 8013 se estiver ocupada (apenas para ambiente dev/v01)
            if [ "${{ needs.determine-environment.outputs.port }}" == "8013" ]; then
              echo "üîé Verificando containers na porta 8013..."
              CONTAINER_ID=$(docker ps --filter "publish=8013" --format "{{.ID}}")
              if [ ! -z "$CONTAINER_ID" ]; then
                echo "‚èπÔ∏è Parando container $CONTAINER_ID que est√° usando a porta 8013..."
                docker stop $CONTAINER_ID || true
                docker rm $CONTAINER_ID || true
              fi
            fi

          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              -o ConnectTimeout=30 \
              -o StrictHostKeyChecking=no \
              leonardovieiraxy@ssh.leoproti.com.br << EOF
            # Parar aplica√ß√£o se estiver rodando
            docker stop ${{ needs.determine-environment.outputs.project_name }}-app || true
            docker rm ${{ needs.determine-environment.outputs.project_name }}-app || true
            
            # Criar pasta do projeto
            mkdir -p /home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}
            cd /home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}
            
            # Corrigir permiss√µes do diret√≥rio h2data
            echo "üîß Configurando diret√≥rio H2 para ${{ needs.determine-environment.outputs.environment }}..."
            if [ -d "./h2data" ]; then
              sudo rm -rf ./h2data 2>/dev/null || rm -rf ./h2data
            fi
            
            mkdir -p ./h2data
            chmod 755 ./h2data
            chown -R leonardovieiraxy:leonardovieiraxy ./h2data 2>/dev/null || true
            
            echo "‚úÖ ${{ needs.determine-environment.outputs.environment }} environment prepared"
          EOF

      - name: üì§ Transfer project files
        run: |
          echo "üì§ Transferring files to ${{ needs.determine-environment.outputs.environment }}..."
          
          # Transferir docker-compose customizado
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                docker-compose-deploy.yml \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}/docker-compose.yml
          
          # Transferir Dockerfile
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                Dockerfile.spring \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}/
          
          # Transferir JAR
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                target/ \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}/target/

      - name: üöÄ Deploy on server
        run: |
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              leonardovieiraxy@ssh.leoproti.com.br << EOF
            cd /home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}
            
            echo "üöÄ Deploying ${{ needs.determine-environment.outputs.project_name }} to ${{ needs.determine-environment.outputs.environment }}..."
            
            # Build e start do container
            docker-compose down --remove-orphans || true
            docker-compose build --no-cache
            docker-compose up -d
            
            # Aguardar container inicializar
            echo "‚è≥ Waiting for container to start..."
            sleep 30
            
            # Verificar se est√° rodando
            if docker ps | grep ${{ needs.determine-environment.outputs.project_name }}-app; then
              echo "‚úÖ ${{ needs.determine-environment.outputs.project_name }} deployed successfully!"
              echo "üåê Available at: https://${{ needs.determine-environment.outputs.domain }}"
              
              # Testar endpoint
              echo "üß™ Testing health endpoint..."
              if docker exec ${{ needs.determine-environment.outputs.project_name }}-app curl -f http://localhost:${{ needs.determine-environment.outputs.port }}/actuator/health; then
                echo "‚úÖ Health check passed!"
              else
                echo "‚ö†Ô∏è  Health check failed, but container is running"
              fi
            else
              echo "‚ùå Deployment failed!"
              docker logs ${{ needs.determine-environment.outputs.project_name }}-app || true
              exit 1
            fi
          EOF

      - name: üìä Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project:** ${{ needs.determine-environment.outputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Domain:** https://${{ needs.determine-environment.outputs.domain }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Port:** ${{ needs.determine-environment.outputs.port }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile:** ${{ needs.determine-environment.outputs.spring_profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Tag:** ${{ needs.determine-environment.outputs.deploy_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [üåê Application](https://${{ needs.determine-environment.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
          echo "- [‚ù§Ô∏è Health Check](https://${{ needs.determine-environment.outputs.domain }}/actuator/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìä Products API](https://${{ needs.determine-environment.outputs.domain }}/produtos)" >> $GITHUB_STEP_SUMMARY
          echo "- [üë• Students API](https://${{ needs.determine-environment.outputs.domain }}/alunos)" >> $GITHUB_STEP_SUMMARY