name: 🚀 Deploy ProWeb (Staging/Production)

on:
  push:
    branches:
      - main        # Produção (proweb.leoproti.com.br)
      - staging     # Homologação (staging.proweb.leoproti.com.br)
    paths-ignore:
      - 'README.md'
      - '**/*.md'
      - 'docs/**'
    tags:
      - 'v*'        # Deploy por tags (releases)
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - staging
        - production
      version_tag:
        description: 'Version tag (for production)'
        required: false
        type: string

env:
  MAVEN_OPTS: -Xmx2048m

jobs:
  determine-environment:
    name: 🎯 Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      project_name: ${{ steps.env.outputs.project_name }}
      domain: ${{ steps.env.outputs.domain }}
      port: ${{ steps.env.outputs.port }}
      spring_profile: ${{ steps.env.outputs.spring_profile }}
      deploy_tag: ${{ steps.env.outputs.deploy_tag }}
    
    steps:
      - name: 🎯 Determine deployment environment
        id: env
        run: |
          # Determine environment based on branch and manual input
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            ENV="staging"
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            ENV="production"
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            ENV="staging"
          else
            ENV="staging"
          fi
          
          # Set environment-specific variables
          case $ENV in
            "production")
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "project_name=proweb-prod" >> $GITHUB_OUTPUT
              echo "domain=proweb.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8021" >> $GITHUB_OUTPUT
              echo "spring_profile=prod" >> $GITHUB_OUTPUT
              echo "deploy_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "project_name=proweb-staging" >> $GITHUB_OUTPUT
              echo "domain=staging.proweb.leoproti.com.br" >> $GITHUB_OUTPUT
              echo "port=8020" >> $GITHUB_OUTPUT
              echo "spring_profile=staging" >> $GITHUB_OUTPUT
              echo "deploy_tag=staging-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
              ;;
          esac

  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    needs: determine-environment
    
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Display deployment info
        run: |
          echo "🚀 Deploying to: ${{ needs.determine-environment.outputs.environment }}"
          echo "📁 Project: ${{ needs.determine-environment.outputs.project_name }}"
          echo "🌐 Domain: ${{ needs.determine-environment.outputs.domain }}"
          echo "🔌 Port: ${{ needs.determine-environment.outputs.port }}"
          echo "📝 Profile: ${{ needs.determine-environment.outputs.spring_profile }}"
          echo "🏷️ Tag: ${{ needs.determine-environment.outputs.deploy_tag }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: 🔧 Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: 🧪 Run tests
        run: ./mvnw clean test

      - name: 🔨 Build Spring Boot application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=${{ needs.determine-environment.outputs.spring_profile }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.determine-environment.outputs.project_name }}-jar
          path: target/*.jar

  deploy:
    name: 🚀 Deploy to Server
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.determine-environment.outputs.project_name }}-jar
          path: target/

      - name: ☁️ Setup Cloudflare
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: 🔑 Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOME_SERVER_SSH_KEY }}

      - name: 🔐 Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host ssh.leoproti.com.br" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "  ConnectTimeout 30" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: 📝 Generate docker-compose for environment
        run: |
          cat > docker-compose-deploy.yml << EOF
          version: "3.8"
          
          services:
            app:
              build:
                context: .
                dockerfile: Dockerfile.spring
              image: ${{ needs.determine-environment.outputs.project_name }}-app
              container_name: ${{ needs.determine-environment.outputs.project_name }}-app
              ports:
                - "${{ needs.determine-environment.outputs.port }}:${{ needs.determine-environment.outputs.port }}"
              environment:
                - SPRING_PROFILES_ACTIVE=${{ needs.determine-environment.outputs.spring_profile }}
                - SERVER_PORT=${{ needs.determine-environment.outputs.port }}
                - SERVER_CONTEXT_PATH=/
                - SPRING_DATASOURCE_URL=jdbc:h2:file:/data/h2db/${{ needs.determine-environment.outputs.environment }}-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL
                - SPRING_DATASOURCE_DRIVER=org.h2.Driver
                - SPRING_DATASOURCE_USERNAME=sa
                - SPRING_DATASOURCE_PASSWORD=\${H2_DB_PASSWORD:-${{ needs.determine-environment.outputs.environment }}password}
                - SPRING_JPA_DIALECT=org.hibernate.dialect.H2Dialect
                - SPRING_JPA_SHOW_SQL=false
                - SPRING_JPA_HIBERNATE_DDL_AUTO=update
                - H2_CONSOLE_ENABLED=false
                - LOG_LEVEL=INFO
                - LOG_LEVEL_WEB=WARN
                - JAVA_OPTS=-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom
                - TZ=America/Sao_Paulo
                - GIT_COMMIT=${{ github.sha }}
                - DEPLOY_TAG=${{ needs.determine-environment.outputs.deploy_tag }}
                - ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}
              volumes:
                - ./h2data:/data/h2db:rw
              restart: unless-stopped
              user: "1000:1000"
              networks:
                - ${{ needs.determine-environment.outputs.project_name }}-network
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:${{ needs.determine-environment.outputs.port }}/actuator/health || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 45s
              depends_on: []
              logging:
                driver: "json-file"
                options:
                  max-size: "10m"
                  max-file: "3"
          
          networks:
            ${{ needs.determine-environment.outputs.project_name }}-network:
              driver: bridge
              name: ${{ needs.determine-environment.outputs.project_name }}-network
          EOF

      - name: 🧹 Clean and prepare server
        run: |
          echo "🚀 Preparing ${{ needs.determine-environment.outputs.environment }} environment..."
          
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              -o ConnectTimeout=30 \
              -o StrictHostKeyChecking=no \
              leonardovieiraxy@ssh.leoproti.com.br << EOF
            # Parar aplicação se estiver rodando
            docker stop ${{ needs.determine-environment.outputs.project_name }}-app || true
            docker rm ${{ needs.determine-environment.outputs.project_name }}-app || true
            
            # Criar pasta do projeto
            mkdir -p /home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}
            cd /home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}
            
            # Corrigir permissões do diretório h2data
            echo "🔧 Configurando diretório H2 para ${{ needs.determine-environment.outputs.environment }}..."
            if [ -d "./h2data" ]; then
              sudo rm -rf ./h2data 2>/dev/null || rm -rf ./h2data
            fi
            
            mkdir -p ./h2data
            chmod 755 ./h2data
            chown -R leonardovieiraxy:leonardovieiraxy ./h2data 2>/dev/null || true
            
            echo "✅ ${{ needs.determine-environment.outputs.environment }} environment prepared"
          EOF

      - name: 📤 Transfer project files
        run: |
          echo "📤 Transferring files to ${{ needs.determine-environment.outputs.environment }}..."
          
          # Transferir docker-compose customizado
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                docker-compose-deploy.yml \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}/docker-compose.yml
          
          # Transferir Dockerfile
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                Dockerfile.spring \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}/
          
          # Transferir JAR
          rsync -avz \
                -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
                target/ \
                leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}/target/

      - name: 🚀 Deploy on server
        run: |
          ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
              leonardovieiraxy@ssh.leoproti.com.br << EOF
            cd /home/leonardovieiraxy/projetos/${{ needs.determine-environment.outputs.project_name }}
            
            echo "🚀 Deploying ${{ needs.determine-environment.outputs.project_name }} to ${{ needs.determine-environment.outputs.environment }}..."
            
            # Build e start do container
            docker-compose down --remove-orphans || true
            docker-compose build --no-cache
            docker-compose up -d
            
            # Aguardar container inicializar
            echo "⏳ Waiting for container to start..."
            sleep 30
            
            # Verificar se está rodando
            if docker ps | grep ${{ needs.determine-environment.outputs.project_name }}-app; then
              echo "✅ ${{ needs.determine-environment.outputs.project_name }} deployed successfully!"
              echo "🌐 Available at: https://${{ needs.determine-environment.outputs.domain }}"
              
              # Testar endpoint
              echo "🧪 Testing health endpoint..."
              if docker exec ${{ needs.determine-environment.outputs.project_name }}-app curl -f http://localhost:${{ needs.determine-environment.outputs.port }}/actuator/health; then
                echo "✅ Health check passed!"
              else
                echo "⚠️  Health check failed, but container is running"
              fi
            else
              echo "❌ Deployment failed!"
              docker logs ${{ needs.determine-environment.outputs.project_name }}-app || true
              exit 1
            fi
          EOF

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project:** ${{ needs.determine-environment.outputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Domain:** https://${{ needs.determine-environment.outputs.domain }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Port:** ${{ needs.determine-environment.outputs.port }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile:** ${{ needs.determine-environment.outputs.spring_profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Tag:** ${{ needs.determine-environment.outputs.deploy_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 Application](https://${{ needs.determine-environment.outputs.domain }})" >> $GITHUB_STEP_SUMMARY
          echo "- [❤️ Health Check](https://${{ needs.determine-environment.outputs.domain }}/actuator/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 Products API](https://${{ needs.determine-environment.outputs.domain }}/produtos)" >> $GITHUB_STEP_SUMMARY
          echo "- [👥 Students API](https://${{ needs.determine-environment.outputs.domain }}/alunos)" >> $GITHUB_STEP_SUMMARY